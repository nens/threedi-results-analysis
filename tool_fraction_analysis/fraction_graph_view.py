from qgis.core import Qgis
from qgis.core import QgsFeature
from qgis.core import QgsFeatureRequest
from qgis.core import QgsProject
from qgis.core import QgsValueMapFieldFormatter
from qgis.core import QgsVectorLayer
from qgis.core import QgsWkbTypes
from qgis.gui import QgsRubberBand
from qgis.PyQt.QtCore import pyqtSlot
from qgis.PyQt.QtCore import QSize
from qgis.PyQt.QtCore import Qt
from qgis.PyQt.QtWidgets import QCheckBox
from qgis.PyQt.QtWidgets import QComboBox
from qgis.PyQt.QtWidgets import QHBoxLayout
from qgis.PyQt.QtWidgets import QMessageBox
from qgis.PyQt.QtWidgets import QSizePolicy
from qgis.PyQt.QtWidgets import QSpacerItem
from qgis.PyQt.QtWidgets import QSplitter
from qgis.PyQt.QtWidgets import QVBoxLayout
from qgis.PyQt.QtWidgets import QWidget
from threedi_results_analysis.datasource.threedi_results import normalized_object_type
from threedi_results_analysis.threedi_plugin_model import ThreeDiPluginModel
from threedi_results_analysis.threedi_plugin_model import ThreeDiResultItem
from threedi_results_analysis.tool_fraction_analysis.fraction_plot import FractionPlot
from threedi_results_analysis.utils.constants import TOOLBOX_MESSAGE_TITLE
from threedi_results_analysis.utils.user_messages import messagebar_message
from threedi_results_analysis.utils.user_messages import statusbar_message
from typing import List

import logging


logger = logging.getLogger(__name__)

# providers which don't have a primary key
PROVIDERS_WITHOUT_PRIMARY_KEY = ["memory", "ogr"]


def is_threedi_layer(vector_layer: QgsVectorLayer) -> bool:
    """
    Checks whether a layer has been generated by the 3Di toolbox.

    It is an extensive check, trying to be backwards compatible with older tools.
    """
    if not vector_layer:
        return False

    provider = vector_layer.dataProvider()
    valid_object_type = normalized_object_type(vector_layer.name())

    if provider.name() in ["spatialite", "memory", "ogr"] and valid_object_type:
        return True
    elif vector_layer.objectName() in ("flowline", "node", "pump_linestring", "cell", "pump"):
        return True

    return False

class FractionWidget(QWidget):
    def __init__(
        self,
        parent=None,
        model: ThreeDiPluginModel = None,
        parameter_config=[],
        name="",
        geometry_type=QgsWkbTypes.Point,
    ):
        super().__init__(parent)

        self.name = name
        self.model = model
        self.parent = parent
        self.geometry_type = geometry_type

        self.setup_ui()

        # self.location_model = LocationTimeseriesModel(self.model)
        self.graph_plot.set_location_model(self.location_model)
        self.graph_plot.set_result_model(self.model)
        self.location_timeseries_table.setModel(self.location_model)
        self._updateHiddenColumns(self.showFullLegendCheckbox.checkState())

        # set listeners
        self.parameter_combo_box.currentIndexChanged.connect(self.parameter_change)
        self.ts_units_combo_box.currentIndexChanged.connect(self.time_units_change)
        self.showFullLegendCheckbox.stateChanged.connect(self._updateHiddenColumns)
        self.location_timeseries_table.deleteRequested.connect(self._removeRows)

        # init parameter selection
        self.set_parameter_list(parameter_config)

        self.marker = QgsRubberBand(self.parent.iface.mapCanvas())
        self.marker.setColor(Qt.red)
        self.marker.setWidth(2)

    def _removeRows(self, index_list):
        # Also here, remove in decreasing order to keep table idx valid
        row_list = [index.row() for index in index_list]
        row_list.sort(reverse=True)
        for row in row_list:
            self.location_model.removeRows(row, 1)

    def _updateHiddenColumns(self, state):
        if state == Qt.Unchecked:
            for i in range(3, 7):
                self.location_timeseries_table.setColumnHidden(i, True)
        else:
            for i in range(7):
                self.location_timeseries_table.setColumnHidden(i, False)

    def refresh_table(self):
        # trigger all listeners by emiting dataChanged signal
        self.location_model.beginResetModel()
        self.location_model.endResetModel()
        self.location_timeseries_table._update_table_widgets()

    @pyqtSlot(ThreeDiResultItem)
    def result_removed(self, result_item: ThreeDiResultItem):
        # Remove corresponding plots that refer to this item
        item_idx_to_remove = []
        for count, item in enumerate(self.location_model.rows):
            if item.result.value is result_item:
                item_idx_to_remove.append(count)

        # We delete them descending to keep the row idx consistent
        for item_idx in reversed(item_idx_to_remove):
            self.location_model.removeRows(item_idx, 1)

        # In case there are no more other results in results model, we clean up the parameter combobox
        if len(self.model.get_results(checked_only=False)) == 1:
            self.parameter_combo_box.clear()

    def set_parameter_list(self, parameter_config):
        self.parameter_combo_box.clear()

        if not parameter_config:
            return

        self.parameters = dict([(p["name"], p) for p in parameter_config])

        params = sorted([p["name"] for p in parameter_config])

        Q_CUM = 'Net cumulative discharge'
        active = {'Waterlevel', Q_CUM}
        if Q_CUM not in params:
            active.add('Discharge')
        active_idx = None

        for idx, param in enumerate(params):
            self.parameter_combo_box.addItem(param)
            if param in active:
                active_idx = idx

        self.parameter_combo_box.setCurrentIndex(active_idx)

    def on_close(self):
        """
        unloading widget and remove all required stuff
        :return:
        """
        self.parameter_combo_box.currentIndexChanged.disconnect(self.parameter_change)

    def closeEvent(self, event):
        """
        overwrite of QDockWidget class to emit signal
        :param event: QEvent
        """
        self.on_close()
        event.accept()

    def highlight_feature(self, obj_id, obj_type, result_item: ThreeDiResultItem):

        for table_name, layer_id in result_item.parent().layer_ids.items():

            if obj_type == table_name:
                # query layer for object
                filt = u'"id" = {0}'.format(obj_id)
                request = QgsFeatureRequest().setFilterExpression(filt)
                lyr = QgsProject.instance().mapLayer(layer_id)
                features = lyr.getFeatures(request)
                for feature in features:
                    self.marker.setToGeometry(feature.geometry(), lyr)

    def unhighlight_all_features(self):
        """Remove the highlights from all layers"""
        self.marker.reset()

    def setup_ui(self):

        mainLayout = QHBoxLayout(self)
        self.setLayout(mainLayout)

        splitterWidget = QSplitter(self)

        # add plot
        self.graph_plot = FractionPlot(self)
        sizePolicy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.graph_plot.sizePolicy().hasHeightForWidth())
        self.graph_plot.setSizePolicy(sizePolicy)
        self.graph_plot.setMinimumSize(QSize(250, 250))
        splitterWidget.addWidget(self.graph_plot)

        # add widget for timeseries table and other controls
        legendWidget = QWidget(self)
        vLayoutTable = QVBoxLayout(self)
        legendWidget.setLayout(vLayoutTable)

        # add comboboxes
        self.ts_units_combo_box = QComboBox(self)
        self.ts_units_combo_box.insertItems(0, ["hrs", "mins", "s"])
        self.parameter_combo_box = QComboBox(self)
        vLayoutTable.addWidget(self.parameter_combo_box)
        vLayoutTable.addWidget(self.ts_units_combo_box)

        # add timeseries table
        self.location_timeseries_table = None # LocationTimeseriesTable(self)
        self.location_timeseries_table.hoverEnterRow.connect(self.highlight_feature)
        self.location_timeseries_table.hoverExitAllRows.connect(self.unhighlight_all_features)
        sizePolicy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.location_timeseries_table.sizePolicy().hasHeightForWidth())
        self.location_timeseries_table.setSizePolicy(sizePolicy)
        self.location_timeseries_table.setMinimumSize(QSize(250, 0))
        vLayoutTable.addWidget(self.location_timeseries_table)

        # add button below table
        hLayoutButtons = QHBoxLayout(self)
        hLayoutButtons.addItem(QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum))

        self.showFullLegendCheckbox = QCheckBox("Show full legend", self)
        self.showFullLegendCheckbox.setCheckState(Qt.Unchecked)
        hLayoutButtons.addWidget(self.showFullLegendCheckbox)

        vLayoutTable.addLayout(hLayoutButtons)

        splitterWidget.addWidget(legendWidget)

        mainLayout.addWidget(splitterWidget)

    def parameter_change(self, nr):
        """
        set current selected parameter and trigger refresh of graphs
        :param nr: nr of selected option of combobox
        :return:
        """
        if nr == -1:
            return  # Combobox cleared

        self.current_parameter = self.parameters[self.parameter_combo_box.currentText()]
        time_units = self.ts_units_combo_box.currentText()
        self.graph_plot.setLabel("bottom", "Time", time_units)
        self.graph_plot.set_parameter(self.current_parameter, time_units)
        self.graph_plot.plotItem.vb.menu.viewAll.triggered.emit()

    def time_units_change(self):
        parameter_idx = self.parameter_combo_box.currentIndex()
        self.parameter_change(parameter_idx)

    def get_feature_index(self, layer, feature):
        """
        get the id of the selected id feature
        :param layer: selected Qgis layer to be added
        :param feature: selected Qgis feature to be added
        :return: idx (integer)
        We can't do ``feature.id()``, so we have to pick something that we
        have agreed on. For now we have hardcoded the 'id' field as the
        default, but that doesn't mean it's always the case in the future
        when more layers are added!
        """
        idx = feature.id()
        if layer.dataProvider().name() in PROVIDERS_WITHOUT_PRIMARY_KEY:
            idx = feature["id"]
        return idx

    def get_object_name(self, layer, feature):
        """
        get the object_name (display_name / type)  of the selected id feature
        :param layer: selected Qgis layer to be added
        :param feature: selected Qgis feature to be added
        :return: object_name (string)
        To get a object_name we use the following logic:
        - get the 'display_name' column if available;
        - if not: get the 'type' column if available;
        - if not: get the 'line_type' column if available;
        - if not: get the 'node_type' column if available;
        - if not: object_name = 'N/A'
        """
        for column_nr, field in enumerate(layer.fields()):
            if "display_name" in field.name():
                return feature[column_nr]
        for column_nr, field in enumerate(layer.fields()):
            if field.name() == "type":
                return feature[column_nr]

        # Apply ValueMap field formatter
        for column_nr, field in enumerate(layer.fields()):
            if field.name() == "line_type":
                config = layer.editorWidgetSetup(column_nr).config()
                return QgsValueMapFieldFormatter().representValue(layer, column_nr, config, None, feature[column_nr])
        for column_nr, field in enumerate(layer.fields()):
            if field.name() == "node_type":
                config = layer.editorWidgetSetup(column_nr).config()
                return QgsValueMapFieldFormatter().representValue(layer, column_nr, config, None, feature[column_nr])

        logger.warning("Layer has no 'display_name', it's probably a result "
                       "layer, but putting a placeholder object name just "
                       "for safety."
                       )

        return "N/A"

    def add_objects(self, layer: QgsVectorLayer, features: List[QgsFeature]) -> bool:
        """
        :param layer: layer of features
        :param features: Qgis layer features to be added
        :return: boolean: new objects are added
        """

        if not is_threedi_layer(layer):
            msg = """Please select results from either the 'flowlines', 'nodes', 'cells' or
            'pumplines' layer."""
            messagebar_message(TOOLBOX_MESSAGE_TITLE, msg, Qgis.Warning, 5.0)
            return False

        if len(self.model.get_results(checked_only=False)) == 0:
            logger.warning("No results loaded")
            return False

        # Retrieve summary of existing items in model (!= graph plots)
        existing_items = [
            f"{item.object_type.value}_{str(item.object_id.value)}_{item.result.value.id}" for item in self.location_model.rows
        ]

        # Determine new items
        new_items = []
        for feature in features:
            new_idx = self.get_feature_index(layer, feature)
            new_object_name = self.get_object_name(layer, feature)

            result_items = self.model.get_results(checked_only=False)
            for result_item in result_items:
                # Check whether this result belongs to the selected grid
                if layer.id() not in result_item.parent().layer_ids.values():
                    continue

                # Check whether a pump isn't already plotted as pump_linestring or vice versa (QGIS doesn't know they are the same thing)
                if layer.objectName() == "pump_linestring":
                    if ("pump_" + str(new_idx) + "_" + result_item.id) in existing_items:
                        logger.error("Pump already plotted as node item")
                        continue
                elif layer.objectName() == "pump":
                    if ("pump_linestring_" + str(new_idx) + "_" + result_item.id) in existing_items:
                        logger.error("Pump already plotted as line item")
                        continue

                # Check whether a node isn't already plotted as cell or vice versa (QGIS doesn't know they are the same thing)
                if layer.objectName() == "cell":
                    if ("node_" + str(new_idx) + "_" + result_item.id) in existing_items:
                        logger.error("Cell already plotted as node item")
                        continue
                elif layer.objectName() == "node":
                    if ("cell_" + str(new_idx) + "_" + result_item.id) in existing_items:
                        # Assert whether this is a 2D node
                        assert new_object_name.startswith("2D")
                        logger.error("Node already plotted as cell item")
                        continue

                if (layer.objectName() + "_" + str(new_idx) + "_" + result_item.id) not in existing_items:
                    item = {
                        "object_type": layer.objectName(),
                        "object_id": new_idx,
                        "object_name": new_object_name,
                        "object_label": f"{result_item.parent().text()} | {result_item.text()} | ID: {new_idx}",
                        "result": result_item,
                        "color": self.location_model.get_color(new_idx, layer.id()),
                    }
                    new_items.append(item)

        # Small usability tweak, if we are adding a pump flowline, set a specific parameter
        if not existing_items and "pump" in layer.objectName() and new_items:
            # Find the corresponding name for q_cum, set parameter (and set combobox)
            pump_params = [p for p in self.parameters.values() if p["parameters"] == "q_pump"]
            if pump_params:
                self.graph_plot.set_parameter(pump_params[0], self.ts_units_combo_box.currentText())
                combo_idx = self.parameter_combo_box.findText(pump_params[0]["name"])
                assert combo_idx != -1
                # Prevent the combobox to trigger other signals (and set the parameter again)
                self.parameter_combo_box.blockSignals(True)
                self.parameter_combo_box.setCurrentIndex(combo_idx)
                self.parameter_combo_box.blockSignals(False)

        if len(new_items) > 20:
            msg = (
                "%i new objects selected. Adding those to the plot can "
                "take a while. Do you want to continue?" % len(new_items)
            )
            reply = QMessageBox.question(
                self, "Add objects", msg, QMessageBox.Yes, QMessageBox.No
            )

            if reply == QMessageBox.No:
                return False

        self.location_model.insertRows(new_items)
        msg = "%i new objects added to plot " % len(new_items)
        skipped_items = len(features) - len(new_items)
        if skipped_items > 0:
            msg += "(skipped %s already present objects)" % skipped_items

        statusbar_message(msg)
        return True

    def remove_objects_table(self):
        """
        removes selected objects from table
        :return:
        """
        selection_model = self.location_timeseries_table.selectionModel()
        # get unique rows in selected fields
        rows = set([index.row() for index in selection_model.selectedIndexes()])
        for row in reversed(sorted(rows)):
            self.location_model.removeRows(row, 1)